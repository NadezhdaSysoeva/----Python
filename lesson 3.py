##############################################################################
#1. Реализовать функцию, принимающую два числа (позиционные аргументы) и 
#выполняющую их деление. Числа запрашивать у пользователя, предусмотреть 
#обработку ситуации деления на ноль.

def function_one(a,b):
    if b == 0:
        print('Делить на 0 нельзя!!!')
    else:
        c = a / b
        print(c)    
a = float(input ('Введите первое число '))
b = float(input ('Введите второе число '))  
function_one(a,b)   

##############################################################################
#2. Выполнить функцию, которая принимает несколько параметров, описывающих 
#данные пользователя: имя, фамилия, год рождения, город проживания, email, 
#телефон. Функция должна принимать параметры как именованные аргументы. 
#Осуществить вывод данных о пользователе одной строкой.

def function_two(name, surname, year, city, email, tel):
    print(f'Имя - {name}, фамилия - {surname}, год рождения - {year}, город проживания - {city}, email - {email}, телефон - {tel}.')
function_two(name=input('Введите имя: '),
             surname= input('Введите фамилию: '),
             year=input('Введите год рождения: '),
             city=input('Введите город: '),
             email=input('Введите email: '),
             tel=input('Введите телефон: '))

###############################################################################
#3. Реализовать функцию my_func(), которая принимает три позиционных аргумента 
#и возвращает сумму наибольших двух аргументов.

def my_func(arg_1, arg_2, arg_3):
    if  arg_1<arg_2<arg_3 or arg_1<arg_3<arg_2:
        summa=arg_2 + arg_3
    elif arg_2<arg_1<arg_3 or arg_2<arg_3<arg_1:
        summa=arg_1 + arg_3
    else:
        summa=arg_1 + arg_2
    return summa
print(my_func(arg_1 = float(input ('Введите первое число ')), 
arg_2 = float(input ('Введите второе число ')), 
arg_3 = float(input ('Введите третье число '))))

###############################################################################
#4. Программа принимает действительное положительное число x и целое 
#отрицательное число y. Выполните возведение числа x в степень y. Задание 
#реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись 
#без встроенной функции возведения числа в степень.
#Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в 
#степень с помощью оператора **. Второй — более сложная реализация без 
#оператора **, предусматривающая использование цикла.

# 1 способ
def my_func1(x, y):
    itog = x ** y
    return itog
print(my_func1(x = int(input ('Введите действительное положительное число ')), 
               y = int(input ('Введите целое отрцательное число '))))

# 2 способ
def my_func1(x, y):
    i=1
    itog=1
    while i <= abs(y): 
        itog = itog*1/x 
        i += 1
    return itog
print(my_func1(x = int(input ('Введите действительное положительное число ')), 
               y = int(input ('Введите целое отрцательное число '))))


#############################################################################
#5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. 
#При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить 
#ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых 
#чисел будет добавляться к уже подсчитанной сумме.
#Но если вместо числа вводится специальный символ, выполнение программы 
#завершается. Если специальный символ введён после нескольких чисел, то вначале 
#нужно добавить сумму этих чисел к полученной ранее сумме и после этого 
#завершить программу.

def calculate_sum(*nums):
    sum = 0
    flag = False
    for num in nums:
        try:
            if num:
                sum += float(num)
        except ValueError:
            flag = True
    return sum, flag

general_sum = 0

while True:
    numbers_string = input('Введите числа через пробел: ').split(' ')
    sum, stop_flag = calculate_sum(*numbers_string)
    general_sum += sum
    print(f'сумма {general_sum}')

    if stop_flag:
        break              

#############################################################################
#6. Реализовать функцию int_func(), принимающую слова из маленьких латинских 
#букв и возвращающую их же, но с прописной первой буквой. Например, 
#print(int_func(‘text’)) -> Text.

#1 вариант

def int_func(text):
    text=text.capitalize()
    return text 
    print(text)
print(int_func(text = input('Введите текст ')))

#2 вариант
def int_func(st):
    st[0]=st[0].upper()
    st=''.join(st)
    return st
    print(st)
st=list(input('Введите текст '))
print(int_func(st))  
 
##############################################################################
#7. Продолжить работу над заданием. В программу должна попадать строка из слов, 
#разделённых пробелом. Каждое слово состоит из латинских букв в нижнем регистре. 
#Нужно сделать вывод исходной строки, но каждое слово должно начинаться с 
#заглавной буквы. Используйте написанную ранее функцию int_func().


def int_func(text):
    text=text.capitalize()
    return text 
   #print(text)
lst = []
text2=input('Введите слова через пробел ')
text2=text2.split(' ')
for i in text2:
    lst.append(int_func(i))
    text2=' '.join(lst)
print(text2)





