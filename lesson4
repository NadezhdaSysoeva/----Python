##############################################################################
#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта 
#заработной платы сотрудника. Используйте в нём формулу: 
#(выработка в часах*ставка в час) + премия. Во время выполнения расчёта 
#для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
script_name, productivity, payment, bonus = argv
def zp(productivity, payment, bonus):
    zp1=(float(productivity) * float(payment)) +float(bonus)
    return zp1
print('Имя сотрудника: ', script_name)
print('Выработка в часах: ', productivity)
print('Ставка в час: ', payment)
print('Премия: ', bonus)
print('Заработная плата: ', {zp(float(productivity), float(payment), float(bonus))})

##############################################################################
#2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
#значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
#Для его формирования используйте генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].

lst = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
lst2 = [lst[x] for x in range(1, len(lst)) if lst[x]>lst[x-1]] 

###############################################################################
#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
#Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.

lst = [x for x in range(20,240) if x %20 == 0 or x %21 == 0]

##############################################################################
#4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
#Сформируйте итоговый массив чисел, соответствующих требованию. 
#Элементы выведите в порядке их следования в исходном списке. 
#Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]

lst=[2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
lst2=[x for x in lst if lst.count(x) == 1]

##############################################################################
#5. Реализовать формирование списка, используя функцию range() и возможности 
#генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). 
#Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

lst = [x for x in range(100,1001) if x %2 == 0]
from functools import reduce
result = reduce(lambda x,y: x * y, lst)
print(result)

##############################################################################
#6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее.
#Подсказка: используйте функцию count() и cycle() модуля itertools. 
#Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
#Предусмотрите условие его завершения. 
#### Например, в первом задании выводим целые числа, начиная с 3. 
#При достижении числа 10 — завершаем цикл. 

from itertools import count
a = int(input('Введите начальное число '))
b = int(input('Введите конечное число '))
for el in count(a):
    if el > b:
        break
    else:
        print(el)

#Вторым пунктом необходимо предусмотреть условие, при котором повторение 
#элементов списка прекратится.     

from itertools import cycle
c = 1
st = input('Введите элементы ')
d = int(input('Введите количество повторений '))
for el in cycle(st):
    if c > d:
        break
    else:
        print(el)
        c += 1

##############################################################################
#7. Реализовать генератор с помощью функции с ключевым словом yield, 
#создающим очередное значение. При вызове функции должен создаваться 
#объект-генератор. Функция вызывается следующим образом: for el in fact(n). 
#Она отвечает за получение факториала числа. В цикле нужно выводить только 
#первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, 
#факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial
def fact(n):
    for x in range(1, n+1):
        yield factorial(x)

def generator():
    n=int(input('Введите число '))
    for el in fact(n):
       print(el) 
generator()

