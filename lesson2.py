###############################################################################
#1. Создать список и заполнить его элементами различных типов данных. 
#Реализовать скрипт проверки типа данных каждого элемента. 
#Использовать функцию type() для проверки типа. Элементы списка можно 
#не запрашивать у пользователя, а указать явно, в программе.

My_int = 20
My_str = 'Sofi'
My_float = 15.5
My_None = None
My_bool = True
My_lst = [1, 2, 3]

My_lst1 = [My_int, My_str, My_float, My_None, My_bool, My_lst]
for x in My_lst1:
    print(f'{x} - {type(x)}')
    
##############################################################################
#2. Для списка реализовать обмен значений соседних элементов. Значениями 
#обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве
# элементов последний сохранить на своём месте. Для заполнения списка элементов
# нужно использовать функцию input(). 
lst = list(input('Введите список элементов: ')) 
if len(lst)%2==0:
   lst[::2], lst[1::2] = lst[1::2], lst[::2] 
else:
    lst[:-2:2], lst[1:-1:2] = lst[1:-1:2], lst[:-2:2]
print(lst)


#############################################################################
#3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, 
#к какому времени года относится месяц (зима, весна, лето, осень). Напишите 
#решения через list и dict.

month = input('Введите месяц в виде целого числа от 1 до 12 ')
seasons = {'1': 'Зима',
           '2': 'Зима',
           '3': 'Весна',
           '4': 'Весна',
           '5': 'Весна',
           '6': 'Лето',
           '7': 'Лето',
           '8': 'Лето',
           '9': 'Осень',
           '10': 'Осень',
           '11': 'Осень',
           '12': 'Зима'}
print(f'{seasons[month]}')

#############################################################################
#4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
#Вывести каждое слово с новой строки. Строки нужно пронумеровать. 
#Если слово длинное, выводить только первые 10 букв в слове.

st = input('Введите несколько строк через пробел: ')
st2 = st.split(' ')
for x, val in enumerate(st2, start=1):
    if len(val) >= 10:
        val=val[:10]
    print(f'{x}. {val}')

#############################################################################
#5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных 
#чисел, который не возрастает. У пользователя нужно запрашивать новый элемент
# рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
#то новый элемент с тем же значением должен разместиться после них.
#Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
#Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
#Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
#Набор натуральных чисел можно задать сразу в коде, например, 
#my_list = [7, 5, 3, 3, 2].   
 
my_list = [7, 5, 3, 3, 2]
el = int(input('Введите новый элемент рейтинга: '))
my_list.append(el)
my_list.sort(reverse=True)
print(my_list)

##############################################################################   
#6. * Реализовать структуру данных «Товары». Она должна представлять собой 
#список кортежей. Каждый кортеж хранит информацию об отдельном товаре. 
#В кортеже должно быть два элемента — номер товара и словарь с параметрами, 
#то есть характеристиками товара: название, цена, количество, единица 
#измерения. Структуру нужно сформировать программно, запросив все данные у
# пользователя.

goods = []
number = 0
while input("Хотите добавить товар: да/нет ") == 'да':
    number = number + 1
    param = {}
    param['Название'] = input('Введите название товара ') 
    param['Цена'] = int(input('Введите цену товара '))
    param['Количество'] = int(input('Введите количество товара '))
    param['Ед.'] = input('Введите единицы измерения товара ')
    goods.append(tuple([number, param]))
print(goods)
#Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ
# — характеристика товара, например, название. Тогда значение — список значений
#-характеристик, например, список названий товаров.
analitics = {}
for good in goods:
    for key, val in good[1].items():
        if key in analitics:
            analitics[key].append(val)
        else:
            analitics[key] = [val]
print(analitics)


